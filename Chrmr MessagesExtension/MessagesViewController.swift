//
//  MessagesViewController.swift
//  Chrmr MessagesExtension
//
//  Created by Luke Boggs on 2/6/19.
//  Copyright Â© 2019 Charms Co. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var tableView: UITableView!
    

    @IBOutlet weak var searchContainerView: UIView!
    
    var searchController = UISearchController()
    
    var songClips = [SongClip]()
    
    var fileFetcher = FileFetcher()
    
    var chrmUrlService = ChrmUrlService()

    var chrmPlayer = ChrmPlayer()
    
    var searchTask: DispatchWorkItem?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        searchController = UISearchController(searchResultsController: nil)
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.delegate = self
        searchContainerView.addSubview(searchController.searchBar)
        
        let completionHandler: ([SongClip]) -> Void = {
            songClips in
                self.songClips = songClips;
                self.tableView.delegate = self;
                self.tableView.dataSource = self;

                DispatchQueue.main.async {
                    self.tableView.reloadData()
                }
        }
        fetchChrms(searchTerm: "", completionHandler: completionHandler)
        
    }
    
    func fetchChrms(searchTerm: String, completionHandler: @escaping ([SongClip]) -> Void) {
        var urlComponents = URLComponents(string: "https://us-central1-chrmrapp.cloudfunctions.net/chrms")!
        
        var queryItems = [URLQueryItem(name: "maxLength", value: "15")]
        if (searchTerm != nil && searchTerm != "") {
            queryItems.append(URLQueryItem(name: "q", value: searchTerm))
        } else {
            urlComponents.path += "/collections/trending"
        }
        
        urlComponents.queryItems = queryItems
        
        var request = URLRequest(url: urlComponents.url!)
        
        request.httpMethod = "GET"
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("error")
                print(error)
                return
            }
            guard let httpResponse = response as? HTTPURLResponse,
                (200...299).contains(httpResponse.statusCode) else {
                print("error")
                print(response)
                return
            }
            if let mimeType = httpResponse.mimeType, mimeType == "application/json",
                let data = data,
                let string = String(data: data, encoding: .utf8) {
                    let decoder = JSONDecoder()
                    do {
                        var songClipResponse = try decoder.decode(SongClipResponse.self, from: data)
                        completionHandler(songClipResponse.data.songclips)
                    } catch {
                        print(error.localizedDescription)
                    }
                }
        }.resume()
    }
    
    func filterChrms(searchTerm: String) {
        let completionHandler: ([SongClip]) -> Void = {
            songClips in
            self.songClips = songClips;
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
        fetchChrms(searchTerm: searchTerm, completionHandler: completionHandler)
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

extension MessagesViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        searchController.isActive = false
        let songClip = songClips[indexPath.row];
        
        let completionHandler: (String) -> Void = { chrmUrl in
            
//            var message = MSMessage()
//            var template = MSMessageTemplateLayout()
//            template.mediaFileURL = fileUrl
//
//            message.layout = template
//            self.activeConversation?.insert(message, completionHandler: {
//                error in
//                if let error = error {
//                    print(error)
//                }
//            })
            
//            self.activeConversation?.insertAttachment(fileUrl, withAlternateFilename: nil) {error in
//                if let error = error {
//                    print(error)
//                }
//            }
            
            self.activeConversation?.insertText(chrmUrl) {error in
                if let error = error {
                    print(error)
                }
            }
        }

        chrmUrlService.fetchChrmUrl(songClip: songClip, completionHandler: completionHandler)
    }
}

extension MessagesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return songClips.count;
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "chrmCellId", for: indexPath) as! ChrmCell
        let chrm = songClips[indexPath.row]
        cell.titleLabel?.text = chrm.title
        cell.artistLabel?.text = chrm.artist
        cell.chrmImage.loadImageUsingCache(withUrl: chrm.coverUrl)
        cell.audioUrl = chrm.audioUrl
        cell.chrmId = chrm.id
        cell.chrmPlayer = chrmPlayer
        return cell;
    }
}

extension MessagesViewController: UISearchResultsUpdating {
    
    func updateSearchResults(for searchController: UISearchController) {
        if let searchText = searchController.searchBar.text {
            self.searchTask?.cancel()
            let task = DispatchWorkItem { [weak self] in
                self?.filterChrms(searchTerm: searchText)
            }
            self.searchTask = task
            
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.75, execute: task)
//            filterChrms(searchTerm: searchText)
        }
    }
}

extension MessagesViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchController.isActive = false
        
        if let searchText = searchBar.text {
            filterChrms(searchTerm: searchText)
        }
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        if let searchText = searchBar.text, !searchText.isEmpty {
            print("cancel :(")
            filterChrms(searchTerm: "")
        }
    }
}
